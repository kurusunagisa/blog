[{"content":"エラー内容 GithubでHugoをデプロイしようとすると以下のエラーが起こりました。\n1 2 3 4  (一部抜粋) ERROR 2022/02/22 13:07:50 render of \u0026#34;page\u0026#34; failed: execute of template failed: template: page/search.html:11:19: executing \u0026#34;left-sidebar\u0026#34; at \u0026lt;partial \u0026#34;sidebar/left.html\u0026#34; .\u0026gt;: error calling partial: \u0026#34;/home/runner/work/blog/blog/themes/hugo-theme-stack/layouts/partials/sidebar/left.html:43:58\u0026#34;: execute of template failed: template: partials/sidebar/left.html:43:58: executing \u0026#34;partials/sidebar/left.html\u0026#34; at \u0026lt;.Params.newTab\u0026gt;: can\u0026#39;t evaluate field Params in type *navigation.MenuEntry Total in 164 ms Error: Process completed with exit code 255.   解決策 HugoのExtendedをビルド時にダウンロードするようにします。以下のようにして、Extendedを有効にしてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  name:github pageson:push:branches:- main jobs:deploy:runs-on:ubuntu-18.04steps:- uses:actions/checkout@v2with:submodules:truefetch-depth:0- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.92.2\u0026#39;extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}external_repository:kurusunagisa/blogpublish_branch:main  なぎさの一言  エラーはしっかりとググって解決することが大事です！    ","date":"2022-02-22T22:16:16+09:00","permalink":"https://kurusunagisa.github.io/blog/p/github-deploy-error/","title":"Github Deploy Error"},{"content":"この記事でわかること  RPCとは何か gRPCの成り立ち gRPCとGolangの繋がり  RPCとは？ 皆さんはRPCを知っていますか？ RPCは情報のやり取りの手法で、「クライアントーサーバ」型の通信プロトコルです。クライアントがサーバに対してパラメータでデータを送信し、サーバはパラメータに応じた処理を実行してその結果をクライアントに返します。簡単に言えば、APIサーバにリクエストを投げると結果が返ってくる、そんなイメージです。私たちが普段目にするパラメータはXML形式やJSON形式が多いです。ただ、これらは人間が扱いやすくすることを最優先した結果データの転送効率が悪くなってしまったのでした……\n効率の良いプロトコルを目指して 転送効率のいい形式を目指した結果、ある1つの形式が生まれました。それがgRPCです。\ngRPCは天下のGoogleが開発した技術がベースとなっています。だからgが頭につくんですね。Googleのサービスはマイクロサービスアーキテクチャで構築されており、サービス間のデータのやり取りが非常に多いというわけです。そのため、Googleのつよつよエンジニアが~自分達で勝手に~プロトコルを定義して使っていました。現代はマイクロサービスアーキテクチャ全盛期。gRPCはマイクロサービスアーキテクチャに特化して作られており、非常に効率が良く扱いやすいのです。そのため、今日現在ではgRPCが多くの場所で使われています。\nGolangとgRPC GolangはgRPCと同じくGoogle製です。そのため、相性がいいのです。(この世はGoogleに支配されている)\nGolangではgrpcというモジュールをインポートするだけでgRPCが使えます。\nなぎさの一言  gRPCはハイスペックだけど普及率など問題点も多い！そのため時と場合に応じた技術選定が必要ですね！    ##　参考文献 https://knowledge.sakura.ad.jp/24059/\n","date":"2022-02-22T18:35:48+09:00","permalink":"https://kurusunagisa.github.io/blog/p/grpc/","title":"gRPCとは？"},{"content":" こんにちは！！！来栖なぎさです！！     なぎさの成長を見てくださいね～！     それでは、今後ともよろしく！    ","date":"2022-02-08T00:00:00Z","permalink":"https://kurusunagisa.github.io/blog/p/%E5%88%9D%E3%82%81%E3%81%BE%E3%81%97%E3%81%A6/","title":"初めまして！"},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"https://kurusunagisa.github.io/blog/p/","title":""}]